tzpubpri_long <- tzpubpri_long[!(tzpubpri_long$prime %in% c("heshima","haki")),] #8828
tzpubpri_long$time_t <- tzpubpri_long$round
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 1), ]$time_t = 7
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 2), ]$time_t = 8
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 3), ]$time_t = 9
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 4), ]$time_t = 10
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 5), ]$time_t = 11
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 6), ]$time_t = 12
table(tzpubpri_long$time_t)
experimental_tanzania_all_rounds <-load("C:/Users/franc/Downloads/allexperimental.RData")
# Remove social ostracism treatment in public
tzpubpri_long <- tzpubpri_long[!(tzpubpri_long$prime %in% c("heshima","haki")),] #8828
tzpubpri_long$time_t <- tzpubpri_long$round
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 1), ]$time_t = 7
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 2), ]$time_t = 8
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 3), ]$time_t = 9
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 4), ]$time_t = 10
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 5), ]$time_t = 11
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 6), ]$time_t = 12
table(tzpubpri_long$time_t)
soc.ostr.treat
tzpubpri_long$soc.ostr.treat
table(tzpubpri_long$soc.ostr.treat)
tzpubpri_long <- tzpubpri_long %>% filter((soc.ostr.treat == 0) | (soc.ostr.treat == NA))
tzpubpri_long
tzpubpri_long <- tzpubpri_long %>% filter((soc.ostr.treat == 0) | (is.na(soc.ostr.treat)))
tzpubpri_long
experimental_tanzania_all_rounds <-load("C:/Users/franc/Downloads/allexperimental.RData")
# Remove social ostracism treatment in public
tzpubpri_long <- tzpubpri_long[!(tzpubpri_long$prime %in% c("heshima","haki")),] #8828
tzpubpri_long <- tzpubpri_long %>% filter((soc.ostr.treat == 0) | (is.na(soc.ostr.treat)))
tzpubpri_long$time_t <- tzpubpri_long$round
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 1), ]$time_t = 7
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 2), ]$time_t = 8
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 3), ]$time_t = 9
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 4), ]$time_t = 10
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 5), ]$time_t = 11
tzpubpri_long[(tzpubpri_long$phase == 'ph2') & (tzpubpri_long$round == 6), ]$time_t = 12
table(tzpubpri_long$time_t)
tzpubpri_long$price_treatment <- tzpubpri_long$time_t >= 10
tzpubpri_long_panel <- tzpubpri_long[!duplicated(tzpubpri_long[c('respid','time_t')]),]
tzpubpri_long_panel$public <- (tzpubpri_long_panel$type == "ph1public")  | (tzpubpri_long_panel$type == "ph2public")
social_dependency_regression_pooled_v1 <- plm(turnout ~ factor(price_treatment)*factor(public)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
summary(social_dependency_regression_pooled_v1)
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 0),
index = c("respid"),
model = "within")
summary(price_treatment_regression)
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
price_treatment_regression_private <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 0),
index = c("respid"),
model = "within")
summary(price_treatment_regression)
summary(price_treatment_regression_private)
summary(price_treatment_regression_public)
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 1),
index = c("respid"),
model = "within")
summary(price_treatment_regression_public)
summary(price_treatment_regression_private)
summary(price_treatment_regression)
summary(price_treatment_regression_private)
summary(price_treatment_regression)
summary(price_treatment_regression_private)
summary(price_treatment_regression_public)
lm(turnout ~ factor(price_treatment)  + factor(respid)*time_t, data = tzpubpri_long_panel)
fixed_effects_time_interaction <- lm(turnout ~ factor(price_treatment)  + factor(respid):time_t, data = tzpubpri_long_panel)
summary(fixed_effects_time_interaction)
summary(price_treatment_regression)
fixed_effects_time_interaction <- lm(turnout ~ factor(price_treatment) + factor(respid):time_t, data = tzpubpri_long_panel%>% filter(public == 0))
summary(fixed_effects_time_interaction)
G <- length(unique(tzpubpri_long_panel$respid))
c <- G/(G - 1)
c
coeftest(model,c * vcovHC(price_treatment_regression, type = "HC1", cluster = "respid"))
coeftest(price_treatment_regression,c * vcovHC(price_treatment_regression, type = "HC1", cluster = "respid"))
coeftest(price_treatment_regression,c * vcovHC(price_treatment_regression, type = "HC1", cluster = "respid"))
require(lmtest)
coeftest(price_treatment_regression,c * vcovHC(price_treatment_regression, type = "HC1", cluster = "respid"))
price_treatment_regression
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'respid'))
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'respid'))
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'clusterid'))
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC1', cluster = 'clusterid'))
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
price_treatment_regression_private <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 1),
index = c("respid"),
model = "within")
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
price_treatment_regression_private <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
coeftest(price_treatment_regression_private, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 1),
index = c("respid"),
model = "within")
coeftest(price_treatment_regression_public, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
price_treatment_regression.se
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
price_treatment_regression.se <- coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
# Public:
price_treatment_regression_private <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
price_treatment_regression_private.se <- coeftest(price_treatment_regression_private, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
# Private:
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 1),
index = c("respid"),
model = "within")
price_treatment_regression_public.se <- coeftest(price_treatment_regression_public, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
stargazer(price_treatment_regression,price_treatment_regression_private,price_treatment_regression_public,
se=list(price_treatment_regression.se,price_treatment_regression_private.se,price_treatment_regression_public.se),
title = "Price Treatment Effects Over Turnout",
dep.var.labels = "Turnout",
keep.stat=c("rsq","adj.rsq","n"),
add.lines = list(
c("Regression Name","Pooled V1","TZ V1","UG V1"),
c("Individual FE:","YES","YES","YES")
),
digits = 3,
star.char = c("t", "*", "**"),
notes = "$^{t}$p$<$0.1;$^{*}$p$<$0.05;$^{**}$p$<$0.01",
notes.append = FALSE,
no.space = TRUE,
out = file.path(plots_path,"Turnout_demand_estimation.tex")
)
if (Sys.info()["user"] == "franc"){
path <- "G:/.shortcut-targets-by-id/1MNag25SqmPKu-XBZeR2OnJURwYFFYidk/Data   Analysis/socialvoting_replication_files"
git_path <- "C:/Users/franc/OneDrive/Documents/GitHub/Chicagobooth/RA-DIL/dissertation_replication"
} else {
data_path <- "/Users/leahrosenzweig/Dropbox (MIT)/Dissertation things/write ups/apsa 2018/AJPS diss article version/socialvoting_replication_files"
}
data_path <- file.path(path,  'data')
plots_path <- file.path(git_path,  'plots')
stargazer(price_treatment_regression,price_treatment_regression_private,price_treatment_regression_public,
se=list(price_treatment_regression.se,price_treatment_regression_private.se,price_treatment_regression_public.se),
title = "Price Treatment Effects Over Turnout",
dep.var.labels = "Turnout",
keep.stat=c("rsq","adj.rsq","n"),
add.lines = list(
c("Regression Name","Pooled V1","TZ V1","UG V1"),
c("Individual FE:","YES","YES","YES")
),
digits = 3,
star.char = c("t", "*", "**"),
notes = "$^{t}$p$<$0.1;$^{*}$p$<$0.05;$^{**}$p$<$0.01",
notes.append = FALSE,
no.space = TRUE,
out = file.path(plots_path,"Turnout_demand_estimation.tex")
)
price_treatment_regression
price_treatment_regression_private
price_treatment_regression_public
price_treatment_regression_public.se <- coeftest(price_treatment_regression_public, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))
price_treatment_regression_public.se
price_treatment_regression.se
coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))[,2]
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
price_treatment_regression.se <- coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))[,2]
# Public:
price_treatment_regression_private <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
price_treatment_regression_private.se <- coeftest(price_treatment_regression_private, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))[,2]
# Private:
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 1),
index = c("respid"),
model = "within")
price_treatment_regression_public.se <- coeftest(price_treatment_regression_public, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))[,2]
# Export table:
stargazer(price_treatment_regression,price_treatment_regression_private,price_treatment_regression_public,
se=list(price_treatment_regression.se,price_treatment_regression_private.se,price_treatment_regression_public.se),
title = "Price Treatment Effects Over Turnout",
dep.var.labels = "Turnout",
keep.stat=c("rsq","adj.rsq","n"),
add.lines = list(
c("Regression Name","Pooled V1","TZ V1","UG V1"),
c("Individual FE:","YES","YES","YES")
),
digits = 3,
star.char = c("t", "*", "**"),
notes = "$^{t}$p$<$0.1;$^{*}$p$<$0.05;$^{**}$p$<$0.01",
notes.append = FALSE,
no.space = TRUE,
out = file.path(plots_path,"Turnout_demand_estimation.tex")
)
# Start Voting Demand Regressions:
price_treatment_regression <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel,
index = c("respid"),
model = "within")
price_treatment_regression.se <- coeftest(price_treatment_regression, vcovHC(price_treatment_regression, type = 'HC0', cluster = 'group'))[,2]
# Public:
price_treatment_regression_private <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel %>% filter(public == 0),
index = c("respid"),
model = "within")
price_treatment_regression_private.se <- coeftest(price_treatment_regression_private, vcovHC(price_treatment_regression_private, type = 'HC0', cluster = 'group'))[,2]
# Private:
price_treatment_regression_public <- plm(turnout ~ factor(price_treatment)  + time_t,
data = tzpubpri_long_panel%>% filter(public == 1),
index = c("respid"),
model = "within")
price_treatment_regression_public.se <- coeftest(price_treatment_regression_public, vcovHC(price_treatment_regression_public, type = 'HC0', cluster = 'group'))[,2]
stargazer(price_treatment_regression,price_treatment_regression_private,price_treatment_regression_public,
se=list(price_treatment_regression.se,price_treatment_regression_private.se,price_treatment_regression_public.se),
title = "Price Treatment Effects Over Turnout",
dep.var.labels = "Turnout",
keep.stat=c("rsq","adj.rsq","n"),
add.lines = list(
c("Regression Name","Pooled V1","TZ V1","UG V1"),
c("Individual FE:","YES","YES","YES")
),
digits = 3,
star.char = c("t", "*", "**"),
notes = "$^{t}$p$<$0.1;$^{*}$p$<$0.05;$^{**}$p$<$0.01",
notes.append = FALSE,
no.space = TRUE,
out = file.path(plots_path,"Turnout_demand_estimation.tex")
)
stargazer(price_treatment_regression,price_treatment_regression_private,price_treatment_regression_public,
se=list(price_treatment_regression.se,price_treatment_regression_private.se,price_treatment_regression_public.se),
title = "Price Treatment Effects Over Turnout",
dep.var.labels = "Turnout",
keep.stat=c("rsq","adj.rsq","n"),
add.lines = list(
c("Regression Name","Pooled","Private","Public"),
c("Individual FE:","YES","YES","YES")
),
digits = 3,
star.char = c("t", "*", "**"),
notes = "$^{t}$p$<$0.1;$^{*}$p$<$0.05;$^{**}$p$<$0.01",
notes.append = FALSE,
no.space = TRUE,
out = file.path(plots_path,"Turnout_demand_estimation.tex")
)
table(tzpubpri_long_panel$soc.ostr.treat)
source("Gauss-Hermite-Quadrature.R")
# Settings ------------------------------------------------------------------------------
N_dim 		= 3						# Dimensionality = number of function arguments
N_nodes		= 9						# No. of quadrature nodes
L			= 10000000 				# Number of simulation draws
mu = c(0.5, -1.0, 0.0)				# Multivariate normal distribution: mean
# Covariance matrix: creative positive definite matrix (a valid covariance matrix) from A
A	= matrix( c(  1.0,  0.2, -0.5,
0.2,  1.6,  0.9,
-0.5,  0.9,  0.2),  nrow=3, ncol=3, byrow=TRUE)
Cov = t(A) %*% A					# Covariance matrix of multivariate normal distribution
chol_Cov = chol(Cov)				# Cholesky decomposition
# Functions to integrate ----------------------------------------------------------------
f = function(X) {
x1 = X[,1]
x2 = X[,2]
x3 = X[,3]
return(sin(2*x1)*x2^2 + x3)
}
# Initialize quadrature nodes and weights
gauss_hermite = GaussHermite(N_dim, N_nodes)
dir
ls
setwd("~/GitHub/Chicagobooth/EconomicsPhD/Second_Year/quant_marketing/Final/Code")
rm(list = ls())
source("Gauss-Hermite-Quadrature.R")
# Settings ------------------------------------------------------------------------------
N_dim 		= 3						# Dimensionality = number of function arguments
N_nodes		= 9						# No. of quadrature nodes
L			= 10000000 				# Number of simulation draws
mu = c(0.5, -1.0, 0.0)				# Multivariate normal distribution: mean
# Covariance matrix: creative positive definite matrix (a valid covariance matrix) from A
A	= matrix( c(  1.0,  0.2, -0.5,
0.2,  1.6,  0.9,
-0.5,  0.9,  0.2),  nrow=3, ncol=3, byrow=TRUE)
Cov = t(A) %*% A					# Covariance matrix of multivariate normal distribution
chol_Cov = chol(Cov)				# Cholesky decomposition
# Functions to integrate ----------------------------------------------------------------
f = function(X) {
x1 = X[,1]
x2 = X[,2]
x3 = X[,3]
return(sin(2*x1)*x2^2 + x3)
}
# Initialize quadrature nodes and weights
gauss_hermite = GaussHermite(N_dim, N_nodes)
# Gauss-Hermite integral
M			= dim(gauss_hermite$X)[1]
X_adjusted	= sqrt(2) * gauss_hermite$X %*% chol_Cov + matrix(mu, nrow=M, ncol=N_dim, byrow=TRUE)
y			= f(X_adjusted)
I_gauss_hermite	= (1/pi^(N_dim/2)) * t(gauss_hermite$weight) %*% y
gauss_hermite$X
gauss_hermite$X %*% chol_Cov
gauss_hermite$X %*%x
mu
matrix(mu, nrow=M, ncol=N_dim, byrow=TRUE)
matrix(mu, nrow=M, ncol=N_dim, byrow=TRUE)
matrix(mu, nrow=M, ncol=N_dim, byrow=TRUE)
dim(matrix(mu, nrow=M, ncol=N_dim, byrow=TRUE))
N_dim
matrix(mu, nrow=L, ncol=N_dim, byrow=TRUE)
dim(matrix(mu, nrow=L, ncol=N_dim, byrow=TRUE))
gauss_hermite$X %*% chol_Cov
t(gauss_hermite$weight) %*% y
I_gauss_hermite	= (1/pi^(N_dim/2)) * t(gauss_hermite$weight) %*% y
I_gauss_hermite
I_gauss_hermite
X_draws		= matrix(rnorm(L*N_dim), nrow=L, ncol=N_dim)  %*% chol_Cov + matrix(mu, nrow=L, ncol=N_dim, byrow=TRUE)
y			= f(X_draws);
I_simulated	= mean(y);
comparison = c(I_gauss_hermite, I_simulated, abs(I_gauss_hermite-I_simulated))
print(comparison)
rnorm(L*N_dim)
size(rnorm(L*N_dim))
dim(rnorm(L*N_dim))
Cov = t(A) %*% A					# Covariance matrix of multivariate normal distribution
chol_Cov = chol(Cov)				# Cholesky decomposition
# Settings ------------------------------------------------------------------------------
N_dim 		= 3						# Dimensionality = number of function arguments
N_nodes		= 9						# No. of quadrature nodes
L			= 10000000 				# Number of simulation draws
mu = c(0.5, -1.0, 0.0)				# Multivariate normal distribution: mean
# Covariance matrix: creative positive definite matrix (a valid covariance matrix) from A
A	= matrix( c(  1.0,  0.2, -0.5,
0.2,  1.6,  0.9,
-0.5,  0.9,  0.2),  nrow=3, ncol=3, byrow=TRUE)
Cov = t(A) %*% A					# Covariance matrix of multivariate normal distribution
chol_Cov = chol(Cov)				# Cholesky decomposition
chol_Cov
dim = N_dim
K	= N_nodes
## Sub-function gauher_mdim
## (Exact copy of gauher)
## Returns result as a list of x and w
gauher_mdim = function(n) {
EPS = 3.0e-14
PIM4 = 0.7511255444649425
MAXIT = 10
x = matrix(0,nrow=n,ncol=1)
w = matrix(0,nrow=n,ncol=1)
m=(n+1)/2
for (i in 1:m) {
if (i == 1)
z=sqrt((2*n+1))-1.85575*(2*n+1)^(-0.16667)
else if (i == 2)
z = z - 1.14*(n^0.426)/z
else if (i == 3)
z=1.86*z-0.86*x[1]
else if (i == 4)
z=1.91*z-0.91*x[2]
else
z=2.0*z-x[i-2]
for (its in 1:MAXIT) {
p1=PIM4
p2=0.0
for (j in 1:n) {
p3=p2
p2=p1
p1=z*sqrt(2.0/j)*p2-sqrt(((j-1))/j)*p3
}
pp=sqrt(2*n)*p2
z1=z
z=z1-p1/pp
if (abs(z-z1) <= EPS) break
}
x[i] = z
x[n+1-i] = -z
w[i]=2.0/(pp*pp)
w[n+1-i]=w[i]
}
result = list()
result$x = x
result$w = w
return(result)
}
## Sub-function expand_mdim
expand_mdim = function(x,y) {
N_x = nrow(x)
N_y = nrow(y)
z = c()
for (i in 1:N_x) {
D = matrix(x[i,], nrow=N_y, ncol=ncol(x), byrow=T)
E = cbind(D, y)
z = rbind(z, E)
}
return(z)
}
result = gauher_mdim(K)
result
X = result$x
W = result$w
for (i in 2:dim) {
X = expand_mdim(result$x,X)
W = expand_mdim(result$w,W)
}
W
t(apply(W, 1, cumprod))
weight = t(apply(W, 1, cumprod))
View(weight)
dim = N_dim
K	= N_nodes
## Sub-function gauher_mdim
## (Exact copy of gauher)
## Returns result as a list of x and w
gauher_mdim = function(n) {
EPS = 3.0e-14
PIM4 = 0.7511255444649425
MAXIT = 10
x = matrix(0,nrow=n,ncol=1)
w = matrix(0,nrow=n,ncol=1)
m=(n+1)/2
for (i in 1:m) {
if (i == 1)
z=sqrt((2*n+1))-1.85575*(2*n+1)^(-0.16667)
else if (i == 2)
z = z - 1.14*(n^0.426)/z
else if (i == 3)
z=1.86*z-0.86*x[1]
else if (i == 4)
z=1.91*z-0.91*x[2]
else
z=2.0*z-x[i-2]
for (its in 1:MAXIT) {
p1=PIM4
p2=0.0
for (j in 1:n) {
p3=p2
p2=p1
p1=z*sqrt(2.0/j)*p2-sqrt(((j-1))/j)*p3
}
pp=sqrt(2*n)*p2
z1=z
z=z1-p1/pp
if (abs(z-z1) <= EPS) break
}
x[i] = z
x[n+1-i] = -z
w[i]=2.0/(pp*pp)
w[n+1-i]=w[i]
}
result = list()
result$x = x
result$w = w
return(result)
}
## Sub-function expand_mdim
expand_mdim = function(x,y) {
N_x = nrow(x)
N_y = nrow(y)
z = c()
for (i in 1:N_x) {
D = matrix(x[i,], nrow=N_y, ncol=ncol(x), byrow=T)
E = cbind(D, y)
z = rbind(z, E)
}
return(z)
}
## gauher_multidim(dim ... dimensions, K ... quadrature nodes)
## Creates an array X of quadrature node/vectors, and a vector of
## corresponding weights
result = gauher_mdim(K)
## Create a list of nodes and weights
X = result$x
W = result$w
for (i in 2:dim) {
X = expand_mdim(result$x,X)
W = expand_mdim(result$w,W)
}
W
View(W)
t(apply(W, 1, cumprod))
View(weight)
